#ifndef __INPUT_EVENT_LABE_H__
#define __INPUT_EVENT_LABE_H__
#include <eventcodes.h>
#include <string.h>

#define DEFINE_KEYCODE(key) { "KEY_"#key, KEY_##key }
#define DEFINE_AXIS(axis) { #axis, MOTION_EVENT_AXIS_##axis }
#define DEFINE_LED(led) { #led, LED_##led }
#define DEFINE_FLAG(flag) { #flag, POLICY_FLAG_##flag }

namespace nglui{

struct InputEventLabel {
    const char *literal;
    int value;
};

static const InputEventLabel KEYCODES[] = {
    DEFINE_KEYCODE(RESERVED),  
    DEFINE_KEYCODE(ESC),  
    DEFINE_KEYCODE(1), 
    DEFINE_KEYCODE(2),
    DEFINE_KEYCODE(3),     
    DEFINE_KEYCODE(4),     
    DEFINE_KEYCODE(5),     
    DEFINE_KEYCODE(6),     
    DEFINE_KEYCODE(7),     
    DEFINE_KEYCODE(8),     
    DEFINE_KEYCODE(9),     
    DEFINE_KEYCODE(0),     
    DEFINE_KEYCODE(MINUS), 
    DEFINE_KEYCODE(EQUAL), 
    DEFINE_KEYCODE(BACKSPACE),   
    DEFINE_KEYCODE(TAB),   
    DEFINE_KEYCODE(Q),     
    DEFINE_KEYCODE(W),     
    DEFINE_KEYCODE(E),     
    DEFINE_KEYCODE(R),     
    DEFINE_KEYCODE(T),     
    DEFINE_KEYCODE(Y),     
    DEFINE_KEYCODE(U),     
    DEFINE_KEYCODE(I),     
    DEFINE_KEYCODE(O),     
    DEFINE_KEYCODE(P),     
    DEFINE_KEYCODE(LEFTBRACE),
    DEFINE_KEYCODE(RIGHTBRACE),
    DEFINE_KEYCODE(ENTER), 
    DEFINE_KEYCODE(LEFTCTRL),
    DEFINE_KEYCODE(A),     
    DEFINE_KEYCODE(S),     
    DEFINE_KEYCODE(D),     
    DEFINE_KEYCODE(F),     
    DEFINE_KEYCODE(G),     
    DEFINE_KEYCODE(H),     
    DEFINE_KEYCODE(J),     
    DEFINE_KEYCODE(K),     
    DEFINE_KEYCODE(L),     
    DEFINE_KEYCODE(SEMICOLON),
    DEFINE_KEYCODE(APOSTROPHE),
    DEFINE_KEYCODE(GRAVE), 
    DEFINE_KEYCODE(LEFTSHIFT),
    DEFINE_KEYCODE(BACKSLASH),
    DEFINE_KEYCODE(Z),
    DEFINE_KEYCODE(X),
    DEFINE_KEYCODE(C),
    DEFINE_KEYCODE(V),
    DEFINE_KEYCODE(B),     
    DEFINE_KEYCODE(N),     
    DEFINE_KEYCODE(M),     
    DEFINE_KEYCODE(COMMA), 
    DEFINE_KEYCODE(DOT),   
    DEFINE_KEYCODE(SLASH), 
    DEFINE_KEYCODE(RIGHTSHIFT),  
    DEFINE_KEYCODE(KPASTERISK),
    DEFINE_KEYCODE(LEFTALT),
    DEFINE_KEYCODE(SPACE), 
    DEFINE_KEYCODE(CAPSLOCK),
    DEFINE_KEYCODE(F1),    
    DEFINE_KEYCODE(F2),    
    DEFINE_KEYCODE(F3),    
    DEFINE_KEYCODE(F4),    
    DEFINE_KEYCODE(F5),    
    DEFINE_KEYCODE(F6),    
    DEFINE_KEYCODE(F7),    
    DEFINE_KEYCODE(F8),    
    DEFINE_KEYCODE(F9),    
    DEFINE_KEYCODE(F10),   
    DEFINE_KEYCODE(NUMLOCK),
    DEFINE_KEYCODE(SCROLLLOCK),
    DEFINE_KEYCODE(KP7),
    DEFINE_KEYCODE(KP8),
    DEFINE_KEYCODE(KP9),
    DEFINE_KEYCODE(KPMINUS),
    DEFINE_KEYCODE(KP4),   
    DEFINE_KEYCODE(KP5),   
    DEFINE_KEYCODE(KP6),   
    DEFINE_KEYCODE(KPPLUS),
    DEFINE_KEYCODE(KP1),   
    DEFINE_KEYCODE(KP2),   
    DEFINE_KEYCODE(KP3),   
    DEFINE_KEYCODE(KP0),   
    DEFINE_KEYCODE(KPDOT),

    DEFINE_KEYCODE(ZENKAKUHANKAKU),
    DEFINE_KEYCODE(102ND),
    DEFINE_KEYCODE(F11),  
    DEFINE_KEYCODE(F12),
    DEFINE_KEYCODE(RO),
    DEFINE_KEYCODE(KATAKANA),   
    DEFINE_KEYCODE(HIRAGANA),   
    DEFINE_KEYCODE(HENKAN),     
    DEFINE_KEYCODE(KATAKANAHIRAGANA),
    DEFINE_KEYCODE(MUHENKAN),   
    DEFINE_KEYCODE(KPJPCOMMA),  
    DEFINE_KEYCODE(KPENTER),    
    DEFINE_KEYCODE(RIGHTCTRL),  
    DEFINE_KEYCODE(KPSLASH),    
    DEFINE_KEYCODE(SYSRQ),
    DEFINE_KEYCODE(RIGHTALT),   
    DEFINE_KEYCODE(LINEFEED),   
    DEFINE_KEYCODE(HOME),
    DEFINE_KEYCODE(UP),
    DEFINE_KEYCODE(PAGEUP),     
    DEFINE_KEYCODE(LEFT),
    DEFINE_KEYCODE(RIGHT),
    DEFINE_KEYCODE(END),
    DEFINE_KEYCODE(DOWN),
    DEFINE_KEYCODE(PAGEDOWN),
    DEFINE_KEYCODE(INSERT),
    DEFINE_KEYCODE(DELETE),
    DEFINE_KEYCODE(MACRO),
    DEFINE_KEYCODE(MUTE),
    DEFINE_KEYCODE(VOLUMEDOWN),   
    DEFINE_KEYCODE(VOLUMEUP),     
    DEFINE_KEYCODE(POWER),
    DEFINE_KEYCODE(KPEQUAL),
    DEFINE_KEYCODE(KPPLUSMINUS),  
    DEFINE_KEYCODE(PAUSE),  
    DEFINE_KEYCODE(SCALE),

    DEFINE_KEYCODE(KPCOMMA),
    DEFINE_KEYCODE(HANGEUL),
    DEFINE_KEYCODE(HANGUEL), 
    DEFINE_KEYCODE(HANJA),
    DEFINE_KEYCODE(YEN), 
    DEFINE_KEYCODE(LEFTMETA),
    DEFINE_KEYCODE(RIGHTMETA),
    DEFINE_KEYCODE(COMPOSE),

    DEFINE_KEYCODE(STOP),
    DEFINE_KEYCODE(AGAIN),
    DEFINE_KEYCODE(PROPS),
    DEFINE_KEYCODE(UNDO),
    DEFINE_KEYCODE(FRONT),
    DEFINE_KEYCODE(COPY),
    DEFINE_KEYCODE(OPEN),
    DEFINE_KEYCODE(PASTE),
    DEFINE_KEYCODE(FIND),
    DEFINE_KEYCODE(CUT), 
    DEFINE_KEYCODE(HELP),
    DEFINE_KEYCODE(MENU),
    DEFINE_KEYCODE(CALC),
    DEFINE_KEYCODE(SETUP),
    DEFINE_KEYCODE(SLEEP),
    DEFINE_KEYCODE(WAKEUP),
    DEFINE_KEYCODE(FILE),
    DEFINE_KEYCODE(SENDFILE),
    DEFINE_KEYCODE(DELETEFILE),
    DEFINE_KEYCODE(XFER),
    DEFINE_KEYCODE(PROG1),
    DEFINE_KEYCODE(PROG2),
    DEFINE_KEYCODE(WWW),
    DEFINE_KEYCODE(MSDOS),
    DEFINE_KEYCODE(COFFEE),     
    DEFINE_KEYCODE(SCREENLOCK), 
    DEFINE_KEYCODE(ROTATE_DISPLAY),
    DEFINE_KEYCODE(DIRECTION),
    DEFINE_KEYCODE(CYCLEWINDOWS),
    DEFINE_KEYCODE(MAIL),
    DEFINE_KEYCODE(BOOKMARKS),  
    DEFINE_KEYCODE(COMPUTER),   
    DEFINE_KEYCODE(BACK),
    DEFINE_KEYCODE(FORWARD),
    DEFINE_KEYCODE(CLOSECD),
    DEFINE_KEYCODE(EJECTCD),
    DEFINE_KEYCODE(EJECTCLOSECD),     
    DEFINE_KEYCODE(NEXTSONG),
    DEFINE_KEYCODE(PLAYPAUSE),  
    DEFINE_KEYCODE(PREVIOUSSONG),     
    DEFINE_KEYCODE(STOPCD),     
    DEFINE_KEYCODE(RECORD),     
    DEFINE_KEYCODE(REWIND),     
    DEFINE_KEYCODE(PHONE),
    DEFINE_KEYCODE(ISO),  
    DEFINE_KEYCODE(CONFIG),
    DEFINE_KEYCODE(HOMEPAGE),
    DEFINE_KEYCODE(REFRESH),
    DEFINE_KEYCODE(EXIT),
    DEFINE_KEYCODE(MOVE),
    DEFINE_KEYCODE(EDIT),
    DEFINE_KEYCODE(SCROLLUP),
    DEFINE_KEYCODE(SCROLLDOWN),
    DEFINE_KEYCODE(KPLEFTPAREN),
    DEFINE_KEYCODE(KPRIGHTPAREN),
    DEFINE_KEYCODE(NEW),
    DEFINE_KEYCODE(REDO),

    DEFINE_KEYCODE(F13),
    DEFINE_KEYCODE(F14),
    DEFINE_KEYCODE(F15),
    DEFINE_KEYCODE(F16),
    DEFINE_KEYCODE(F17),
    DEFINE_KEYCODE(F18),
    DEFINE_KEYCODE(F19),
    DEFINE_KEYCODE(F20),
    DEFINE_KEYCODE(F21),
    DEFINE_KEYCODE(F22),
    DEFINE_KEYCODE(F23),
    DEFINE_KEYCODE(F24),

    DEFINE_KEYCODE(PLAYCD),
    DEFINE_KEYCODE(PAUSECD),
    DEFINE_KEYCODE(PROG3),
    DEFINE_KEYCODE(PROG4),
    DEFINE_KEYCODE(DASHBOARD),
    DEFINE_KEYCODE(SUSPEND),
    DEFINE_KEYCODE(CLOSE),
    DEFINE_KEYCODE(PLAY),
    DEFINE_KEYCODE(FASTFORWARD),
    DEFINE_KEYCODE(BASSBOOST),
    DEFINE_KEYCODE(PRINT),
    DEFINE_KEYCODE(HP),
    DEFINE_KEYCODE(CAMERA),
    DEFINE_KEYCODE(SOUND),
    DEFINE_KEYCODE(QUESTION),
    DEFINE_KEYCODE(EMAIL),
    DEFINE_KEYCODE(CHAT),
    DEFINE_KEYCODE(SEARCH),
    DEFINE_KEYCODE(CONNECT),
    DEFINE_KEYCODE(FINANCE),
    DEFINE_KEYCODE(SPORT),
    DEFINE_KEYCODE(SHOP),
    DEFINE_KEYCODE(ALTERASE),
    DEFINE_KEYCODE(CANCEL),
    DEFINE_KEYCODE(BRIGHTNESSDOWN),
    DEFINE_KEYCODE(BRIGHTNESSUP),
    DEFINE_KEYCODE(MEDIA),

    DEFINE_KEYCODE(SWITCHVIDEOMODE),

    DEFINE_KEYCODE(KBDILLUMTOGGLE),
    DEFINE_KEYCODE(KBDILLUMDOWN),
    DEFINE_KEYCODE(KBDILLUMUP),

    DEFINE_KEYCODE(SEND),
    DEFINE_KEYCODE(REPLY),
    DEFINE_KEYCODE(FORWARDMAIL),
    DEFINE_KEYCODE(SAVE),
    DEFINE_KEYCODE(DOCUMENTS),

    DEFINE_KEYCODE(BATTERY),

    DEFINE_KEYCODE(BLUETOOTH),
    DEFINE_KEYCODE(WLAN),
    DEFINE_KEYCODE(UWB),

    DEFINE_KEYCODE(UNKNOWN),

    DEFINE_KEYCODE(VIDEO_NEXT),
    DEFINE_KEYCODE(VIDEO_PREV),
    DEFINE_KEYCODE(BRIGHTNESS_CYCLE),
    DEFINE_KEYCODE(BRIGHTNESS_AUTO),
    DEFINE_KEYCODE(WWAN),
    DEFINE_KEYCODE(WIMAX),
    DEFINE_KEYCODE(RFKILL),

    DEFINE_KEYCODE(MICMUTE),
    DEFINE_KEYCODE(OK),
    DEFINE_KEYCODE(TV),
    DEFINE_KEYCODE(SAT),
    DEFINE_KEYCODE(RADIO),
    DEFINE_KEYCODE(AUDIO),
    DEFINE_KEYCODE(VIDEO),
    DEFINE_KEYCODE(EPG),
    DEFINE_KEYCODE(PVR),
    DEFINE_KEYCODE(SUBTITLE),
    DEFINE_KEYCODE(RED),
    DEFINE_KEYCODE(YELLOW),
    DEFINE_KEYCODE(GREEN),
    DEFINE_KEYCODE(BLUE),

    { NULL, 0 }
};
/*
static const InputEventLabel AXES[] = {
    DEFINE_AXIS(X),
    DEFINE_AXIS(Y),
    DEFINE_AXIS(PRESSURE),
    DEFINE_AXIS(SIZE),
    DEFINE_AXIS(TOUCH_MAJOR),
    DEFINE_AXIS(TOUCH_MINOR),
    DEFINE_AXIS(TOOL_MAJOR),
    DEFINE_AXIS(TOOL_MINOR),
    DEFINE_AXIS(ORIENTATION),
    DEFINE_AXIS(VSCROLL),
    DEFINE_AXIS(HSCROLL),
    DEFINE_AXIS(Z),
    DEFINE_AXIS(RX),
    DEFINE_AXIS(RY),
    DEFINE_AXIS(RZ),
    DEFINE_AXIS(HAT_X),
    DEFINE_AXIS(HAT_Y),
    DEFINE_AXIS(LTRIGGER),
    DEFINE_AXIS(RTRIGGER),
    DEFINE_AXIS(THROTTLE),
    DEFINE_AXIS(RUDDER),
    DEFINE_AXIS(WHEEL),
    DEFINE_AXIS(GAS),
    DEFINE_AXIS(BRAKE),
    DEFINE_AXIS(DISTANCE),
    DEFINE_AXIS(TILT),
    DEFINE_AXIS(GENERIC_1),
    DEFINE_AXIS(GENERIC_2),
    DEFINE_AXIS(GENERIC_3),
    DEFINE_AXIS(GENERIC_4),
    DEFINE_AXIS(GENERIC_5),
    DEFINE_AXIS(GENERIC_6),
    DEFINE_AXIS(GENERIC_7),
    DEFINE_AXIS(GENERIC_8),
    DEFINE_AXIS(GENERIC_9),
    DEFINE_AXIS(GENERIC_10),
    DEFINE_AXIS(GENERIC_11),
    DEFINE_AXIS(GENERIC_12),
    DEFINE_AXIS(GENERIC_13),
    DEFINE_AXIS(GENERIC_14),
    DEFINE_AXIS(GENERIC_15),
    DEFINE_AXIS(GENERIC_16),

    // NOTE: If you add a new axis here you must also add it to several other files.
    //       Refer to frameworks/base/core/java/android/view/MotionEvent.java for the full list.
    { NULL, 0 }
};

static const InputEventLabel LEDS[] = {
    DEFINE_LED(NUM_LOCK),
    DEFINE_LED(CAPS_LOCK),
    DEFINE_LED(SCROLL_LOCK),
    DEFINE_LED(COMPOSE),
    DEFINE_LED(KANA),
    DEFINE_LED(SLEEP),
    DEFINE_LED(SUSPEND),
    DEFINE_LED(MUTE),
    DEFINE_LED(MISC),
    DEFINE_LED(MAIL),
    DEFINE_LED(CHARGING),
    DEFINE_LED(CONTROLLER_1),
    DEFINE_LED(CONTROLLER_2),
    DEFINE_LED(CONTROLLER_3),
    DEFINE_LED(CONTROLLER_4),

    // NOTE: If you add new LEDs here, you must also add them to Input.h
    { NULL, 0 }
};

static const InputEventLabel FLAGS[] = {
    DEFINE_FLAG(VIRTUAL),
    DEFINE_FLAG(FUNCTION),
    DEFINE_FLAG(GESTURE),

    { NULL, 0 }
};
*/
static int lookupValueByLabel(const char* literal, const InputEventLabel *list) {
    while (list->literal) {
        if (strcmp(literal, list->literal) == 0) {
            return list->value;
        }
        list++;
    }
    return list->value;
}

static const char* lookupLabelByValue(int value, const InputEventLabel* list) {
    while (list->literal) {
        if (list->value == value) {
            return list->literal;
        }
        list++;
    }
    return NULL;
}

static inline int32_t getKeyCodeByLabel(const char* label) {
    return int32_t(lookupValueByLabel(label, KEYCODES));
}

static inline const char* getLabelByKeyCode(int32_t keyCode) {
    for(int i=0;i<sizeof(KEYCODES)/sizeof(KEYCODES[0]);i++) {
        if(KEYCODES[i].value==keyCode)return KEYCODES[i].literal;
    }
    return NULL;
}

/*static inline uint32_t getKeyFlagByLabel(const char* label) {
    return uint32_t(lookupValueByLabel(label, FLAGS));
}

static inline int32_t getAxisByLabel(const char* label) {
    return int32_t(lookupValueByLabel(label, AXES));
}

static inline const char* getAxisLabel(int32_t axisId) {
    return lookupLabelByValue(axisId, AXES);
}

static inline int32_t getLedByLabel(const char* label) {
    return int32_t(lookupValueByLabel(label, LEDS));
}*/

}
#endif
